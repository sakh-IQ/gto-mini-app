// api/webhook.js
const TELEGRAM_BOT_TOKEN = "7573309906:AAEnBRhkz1gUED5eDAR1A3BXd2LDJkUW8AA";
const GITHUB_TOKEN = process.env.GITHUB_TOKEN; // –î–æ–±–∞–≤–∏–º –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Vercel
const GITHUB_REPO = "sakh-IQ/gto-mini-app"; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π

// –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
const ADMINS = {
  '294959005': '–ò–ª—å—è',  // –î–æ–±–∞–≤—å—Ç–µ —Å–≤–æ–∏—Ö –∞–¥–º–∏–Ω–æ–≤
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤
const isAdmin = (userId) => Object.keys(ADMINS).includes(userId.toString());

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
async function sendTelegramMessage(chatId, text) {
  const response = await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({
      chat_id: chatId,
      text: text
    })
  });
  return response.json();
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å GitHub
async function getBlockedUsersFromGitHub() {
  try {
    const response = await fetch(`https://api.github.com/repos/${GITHUB_REPO}/contents/blockedUsers.json`, {
      headers: {
        'Authorization': `token ${GITHUB_TOKEN}`,
        'Accept': 'application/vnd.github.v3+json'
      }
    });
    
    if (response.ok) {
      const data = await response.json();
      const content = Buffer.from(data.content, 'base64').toString('utf8');
      return { data: JSON.parse(content), sha: data.sha };
    }
    
    return { data: { blockedUsers: [] }, sha: null };
  } catch (error) {
    console.error('Error fetching blocked users:', error);
    return { data: { blockedUsers: [] }, sha: null };
  }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –Ω–∞ GitHub
async function updateBlockedUsersOnGitHub(blockedUsers, sha) {
  const content = Buffer.from(JSON.stringify(blockedUsers, null, 2)).toString('base64');
  
  const response = await fetch(`https://api.github.com/repos/${GITHUB_REPO}/contents/blockedUsers.json`, {
    method: 'PUT',
    headers: {
      'Authorization': `token ${GITHUB_TOKEN}`,
      'Content-Type': 'application/json'
    },
    body: JSON.stringify({
      message: `Update blocked users - ${new Date().toISOString()}`,
      content: content,
      sha: sha
    })
  });
  
  return response.json();
}

// –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
async function editMessage(chatId, messageId, text, replyMarkup = null) {
  const body = {
    chat_id: chatId,
    message_id: messageId,
    text: text
  };
  
  if (replyMarkup) {
    body.reply_markup = replyMarkup;
  }
  
  const response = await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/editMessageText`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(body)
  });
  
  return response.json();
}

export default async function handler(req, res) {
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' });
  }

  try {
    const update = req.body;
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
    if (update.callback_query) {
      const callbackQuery = update.callback_query;
      const chatId = callbackQuery.message.chat.id;
      const messageId = callbackQuery.message.message_id;
      const data = callbackQuery.data;
      const userId = callbackQuery.from.id;
      
      if (!isAdmin(userId)) {
        return res.status(200).json({ ok: true });
      }
      
      if (data.startsWith('take:')) {
        const targetUserId = data.split(':')[1];
        const adminName = ADMINS[userId.toString()];
        
        const newText = callbackQuery.message.text + `\n\nüìã –í–∑—è—Ç–æ –≤ —Ä–∞–±–æ—Ç—É: ${adminName}`;
        
        await editMessage(chatId, messageId, newText, {
          inline_keyboard: [
            [{
              text: `üë§ –í —Ä–∞–±–æ—Ç–µ: ${adminName}`,
              callback_data: `processing:${targetUserId}:${userId}`
            }],
            [{
              text: '‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å',
              callback_data: `complete:${targetUserId}:${userId}`
            }, {
              text: 'üö´ –ë–ª–æ–∫',
              callback_data: `block:${targetUserId}:${userId}`
            }]
          ]
        });
        
      } else if (data.startsWith('block:')) {
        const targetUserId = data.split(':')[1];
        const adminName = ADMINS[userId.toString()];
        
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö
        const { data: blockedData, sha } = await getBlockedUsersFromGitHub();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ
        const isAlreadyBlocked = blockedData.blockedUsers.some(user => user.id.toString() === targetUserId);
        
        if (!isAlreadyBlocked) {
          // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫
          blockedData.blockedUsers.push({
            id: targetUserId,
            blockedAt: new Date().toISOString(),
            reason: "spam",
            blockedBy: userId,
            adminName: adminName
          });
          
          // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∞–π–ª –Ω–∞ GitHub
          await updateBlockedUsersOnGitHub(blockedData, sha);
        }
        
        const newText = callbackQuery.message.text + 
          `\n\nüö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω\n–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: ${adminName}\n${new Date().toLocaleString()}`;
        
        await editMessage(chatId, messageId, newText, { inline_keyboard: [] });
        
      } else if (data.startsWith('complete:')) {
        const adminName = ADMINS[userId.toString()];
        const newText = callbackQuery.message.text + 
          `\n\n‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${adminName}\n${new Date().toLocaleString()}`;
        
        await editMessage(chatId, messageId, newText, { inline_keyboard: [] });
      }
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –≤ —á–∞—Ç–µ
    if (update.message && update.message.text) {
      const message = update.message;
      const chatId = message.chat.id;
      const userId = message.from.id;
      const text = message.text;
      
      if (!isAdmin(userId)) {
        return res.status(200).json({ ok: true });
      }
      
      // –ö–æ–º–∞–Ω–¥–∞ /blocked - –ø–æ–∫–∞–∑–∞—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö
      if (text === '/blocked') {
        const { data: blockedData } = await getBlockedUsersFromGitHub();
        
        if (blockedData.blockedUsers.length === 0) {
          await sendTelegramMessage(chatId, '–°–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç');
        } else {
          const messageText = blockedData.blockedUsers.map(user => {
            const date = new Date(user.blockedAt).toLocaleString();
            const admin = user.adminName || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
            return `üë§ ID: ${user.id}\nüìÖ –î–∞—Ç–∞: ${date}\nüëÆ‚Äç‚ôÇÔ∏è –ê–¥–º–∏–Ω: ${admin}\n\n–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å: /unblock_${user.id}`;
          }).join('\n\n');
          
          await sendTelegramMessage(chatId, 'üìã –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n\n' + messageText);
        }
      }
      
      // –ö–æ–º–∞–Ω–¥–∞ /unblock_ID - —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      if (text.startsWith('/unblock_')) {
        const targetUserId = text.replace('/unblock_', '');
        const { data: blockedData, sha } = await getBlockedUsersFromGitHub();
        
        const userIndex = blockedData.blockedUsers.findIndex(user => user.id.toString() === targetUserId);
        
        if (userIndex === -1) {
          await sendTelegramMessage(chatId, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö');
        } else {
          blockedData.blockedUsers.splice(userIndex, 1);
          await updateBlockedUsersOnGitHub(blockedData, sha);
          
          const adminName = ADMINS[userId.toString()];
          await sendTelegramMessage(chatId, `‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID ${targetUserId} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω\nüëÆ‚Äç‚ôÇÔ∏è –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª: ${adminName}`);
        }
      }
    }
    
    return res.status(200).json({ ok: true });
  } catch (error) {
    console.error('Webhook error:', error);
    return res.status(500).json({ error: 'Internal server error' });
  }
}